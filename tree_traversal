#include<bits/stdc++.h>
using namespace std;
struct Node{
    int data;
    Node* left;
    Node* right;
    Node(int data)
    {
        this->data=data;
        left=right=NULL;
    }
    
};
void preorder(Node* root )
{
    if(root==NULL){
        return ;
    }
    stack<Node*> s;
    s.push(root);
    while(!s.empty())
    {
        Node* curr=s.top();
        s.pop();
        cout<<curr->data<<" ";
        if(curr->right)
        {
            s.push(curr->right);
        }
        if(curr->left)
        {
            s.push(curr->left);
        }
    }
}
void postorder(Node* root)
{
    if(root==NULL)
    {
        return ;
    }
   stack<Node*> s;
   s.push(root);
   stack<int> st;
   while(!s.empty())
   {
       Node* curr=s.top();
      st.push(curr->data);
      s.pop();
      if(curr->left)
      {
          s.push(curr->left);
      }
      if(curr->right)
      {
          s.push(curr->right);
      }
       
   }
   while(!st.empty())
   {
       cout<<st.top()<<" ";
       st.pop();
   }
}

void inorder(Node* root)
{
    if(root==NULL)
    {
        return ;
    }
    stack<Node*> s;
    while(root!=NULL||!s.empty())
    {
        if(root!=NULL)
        {
            s.push(root);
            root=root->left;
        }
        else
        {
            root=s.top();
            s.pop();
            cout<<root->data<<" ";
            root=root->right;
            
        }
    }
}
int main()
{
    Node* root=new Node(1);
    root->left=new Node(2);
    root->right=new Node(3);
    root->left->left=new Node(4);
    root->left->right=new Node(5);
    root->right->left=new Node(6);
    root->right->right=new Node(7);
    cout<<"preorder traverasl of the binary tree"<<endl;
    preorder(root);
    cout<<endl;
    cout<<"postorder traverasl of the binary tree"<<endl;
    postorder(root);
    cout<<endl;
    cout<<"inorder traveral of the binary tree"<<endl;
    inorder(root);
    cout<<endl;
    
    return 0;
}
